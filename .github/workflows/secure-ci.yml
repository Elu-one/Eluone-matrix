name: ELULMC Secure CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install security tools
      run: |
        pip install bandit safety semgrep
        npm install -g audit-ci
    
    - name: Run Bandit security scan
      run: |
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . -f txt
    
    - name: Run Safety check
      run: |
        safety check --json --output safety-report.json || true
        safety check
    
    - name: Run Semgrep
      run: |
        semgrep --config=auto --json --output=semgrep-report.json . || true
        semgrep --config=auto .
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
          semgrep-report.json

  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        pip install flake8 black isort mypy pylint
        pip install -r requirements.txt || echo "No requirements.txt found"
    
    - name: Run Black formatter check
      run: black --check --diff .
    
    - name: Run isort import sorting check
      run: isort --check-only --diff .
    
    - name: Run flake8 linting
      run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    
    - name: Run mypy type checking
      run: mypy . --ignore-missing-imports || true
    
    - name: Run pylint
      run: pylint **/*.py --exit-zero

  dependency-audit:
    name: Dependency Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install pip-audit
      run: pip install pip-audit
    
    - name: Run pip-audit
      run: |
        pip-audit --format=json --output=pip-audit-report.json || true
        pip-audit
    
    - name: Check for known vulnerabilities
      run: |
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
          pip-audit --requirement requirements.txt
        fi

  secrets-scan:
    name: Secrets Detection
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Run TruffleHog
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: [security-scan, code-quality]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install pytest pytest-cov pytest-mock
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
    
    - name: Run unit tests
      run: |
        pytest tests/ --cov=. --cov-report=xml --cov-report=html || echo "No tests found"
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  docker-security:
    name: Docker Security Scan
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.modified, 'Dockerfile') || contains(github.event.head_commit.added, 'Dockerfile')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Build Docker image
      run: |
        if [ -f deployment/docker/Dockerfile ]; then
          docker build -t elulmc-agi:test -f deployment/docker/Dockerfile .
        fi
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'elulmc-agi:test'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  infrastructure-security:
    name: Infrastructure Security
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.modified, 'infrastructure/') || contains(github.event.head_commit.added, 'infrastructure/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.0
    
    - name: Terraform Format Check
      run: |
        if [ -d infrastructure/terraform ]; then
          cd infrastructure/terraform
          terraform fmt -check
        fi
    
    - name: Run Checkov
      uses: bridgecrewio/checkov-action@master
      with:
        directory: infrastructure/
        framework: terraform,kubernetes,dockerfile
        output_format: sarif
        output_file_path: checkov-results.sarif
    
    - name: Upload Checkov results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: checkov-results.sarif

  model-security-scan:
    name: Model Security Validation
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, '[model-update]')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install ML security tools
      run: |
        pip install torch transformers
        pip install -r requirements.txt || echo "No requirements.txt"
    
    - name: Run backdoor scan (mock)
      run: |
        echo "Running backdoor detection scan..."
        python security/backdoor_scan.py --help || echo "Backdoor scanner not ready for CI"
    
    - name: Run membership inference test (mock)
      run: |
        echo "Running membership inference tests..."
        python security/membership_inference.py --help || echo "MI tester not ready for CI"

  compliance-check:
    name: Compliance Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Validate loyalty rules
      run: |
        python -c "
        import json
        with open('governance/policies/loyalty_rules.json', 'r') as f:
            rules = json.load(f)
        assert 'core_directives' in rules
        assert 'forbidden_topics' in rules
        print('Loyalty rules validation passed')
        " || echo "Loyalty rules validation failed"
    
    - name: Check audit requirements
      run: |
        echo "Validating audit and logging requirements..."
        find . -name "*.py" -exec grep -l "audit" {} \; | wc -l
        find . -name "*.py" -exec grep -l "logging" {} \; | wc -l

  deployment-readiness:
    name: Deployment Readiness Check
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan, compliance-check]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Validate deployment configuration
      run: |
        echo "Checking deployment readiness..."
        
        # Check required files exist
        test -f deployment/enclave_server/secure_inference_server.py
        test -f governance/policies/loyalty_rules.json
        test -f docs/architecture.md
        
        echo "Deployment readiness check passed"
    
    - name: Generate deployment artifact
      run: |
        mkdir -p artifacts
        tar -czf artifacts/elulmc-agi-$(date +%Y%m%d-%H%M%S).tar.gz \
          --exclude='.git' \
          --exclude='artifacts' \
          --exclude='__pycache__' \
          .
    
    - name: Upload deployment artifact
      uses: actions/upload-artifact@v3
      with:
        name: deployment-package
        path: artifacts/
        retention-days: 30

  notify-security:
    name: Security Notification
    runs-on: ubuntu-latest
    needs: [security-scan, secrets-scan, docker-security]
    if: failure()
    
    steps:
    - name: Notify security team
      run: |
        echo "Security scan failures detected!"
        echo "This would trigger notifications to the security team in production"
        # In production, this would send alerts to security team
        # curl -X POST $SECURITY_WEBHOOK_URL -d "Security scan failed for commit $GITHUB_SHA"